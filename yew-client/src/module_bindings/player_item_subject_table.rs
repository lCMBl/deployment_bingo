// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::player_item_subject_type::PlayerItemSubject;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `player_item_subject`.
///
/// Obtain a handle from the [`PlayerItemSubjectTableAccess::player_item_subject`] method on [`super::RemoteTables`],
/// like `ctx.db.player_item_subject()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.player_item_subject().on_insert(...)`.
pub struct PlayerItemSubjectTableHandle<'ctx> {
    imp: __sdk::TableHandle<PlayerItemSubject>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `player_item_subject`.
///
/// Implemented for [`super::RemoteTables`].
pub trait PlayerItemSubjectTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`PlayerItemSubjectTableHandle`], which mediates access to the table `player_item_subject`.
    fn player_item_subject(&self) -> PlayerItemSubjectTableHandle<'_>;
}

impl PlayerItemSubjectTableAccess for super::RemoteTables {
    fn player_item_subject(&self) -> PlayerItemSubjectTableHandle<'_> {
        PlayerItemSubjectTableHandle {
            imp: self
                .imp
                .get_table::<PlayerItemSubject>("player_item_subject"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct PlayerItemSubjectInsertCallbackId(__sdk::CallbackId);
pub struct PlayerItemSubjectDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for PlayerItemSubjectTableHandle<'ctx> {
    type Row = PlayerItemSubject;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = PlayerItemSubject> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = PlayerItemSubjectInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> PlayerItemSubjectInsertCallbackId {
        PlayerItemSubjectInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: PlayerItemSubjectInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = PlayerItemSubjectDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> PlayerItemSubjectDeleteCallbackId {
        PlayerItemSubjectDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: PlayerItemSubjectDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<PlayerItemSubject>("player_item_subject");
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<PlayerItemSubject>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<PlayerItemSubject>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}
