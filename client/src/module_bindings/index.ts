// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { CastCheckOffVote } from "./cast_check_off_vote_reducer.ts";
export { CastCheckOffVote };
import { CheckForWinner } from "./check_for_winner_reducer.ts";
export { CheckForWinner };
import { CreateBingoBoard } from "./create_bingo_board_reducer.ts";
export { CreateBingoBoard };
import { DeleteBingoItem } from "./delete_bingo_item_reducer.ts";
export { DeleteBingoItem };
import { JoinGame } from "./join_game_reducer.ts";
export { JoinGame };
import { RemoveExpiredVotes } from "./remove_expired_votes_reducer.ts";
export { RemoveExpiredVotes };
import { SetName } from "./set_name_reducer.ts";
export { SetName };
import { SignIn } from "./sign_in_reducer.ts";
export { SignIn };
import { StartNewGame } from "./start_new_game_reducer.ts";
export { StartNewGame };
import { SubmitNewBingoItem } from "./submit_new_bingo_item_reducer.ts";
export { SubmitNewBingoItem };

// Import and reexport all table handle types
import { BingoBoardTableHandle } from "./bingo_board_table.ts";
export { BingoBoardTableHandle };
import { BingoItemTableHandle } from "./bingo_item_table.ts";
export { BingoItemTableHandle };
import { GameSessionTableHandle } from "./game_session_table.ts";
export { GameSessionTableHandle };
import { ItemCheckVoteTableHandle } from "./item_check_vote_table.ts";
export { ItemCheckVoteTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };
import { PlayerItemSubjectTableHandle } from "./player_item_subject_table.ts";
export { PlayerItemSubjectTableHandle };
import { PlayerSessionTableHandle } from "./player_session_table.ts";
export { PlayerSessionTableHandle };
import { RemoveExpiredVotesTimerTableHandle } from "./remove_expired_votes_timer_table.ts";
export { RemoveExpiredVotesTimerTableHandle };

// Import and reexport all types
import { BingoBoard } from "./bingo_board_type.ts";
export { BingoBoard };
import { BingoItem } from "./bingo_item_type.ts";
export { BingoItem };
import { BoardItem } from "./board_item_type.ts";
export { BoardItem };
import { BoardItemTile } from "./board_item_tile_type.ts";
export { BoardItemTile };
import { GameSession } from "./game_session_type.ts";
export { GameSession };
import { ItemCheckVote } from "./item_check_vote_type.ts";
export { ItemCheckVote };
import { Player } from "./player_type.ts";
export { Player };
import { PlayerItemSubject } from "./player_item_subject_type.ts";
export { PlayerItemSubject };
import { PlayerSession } from "./player_session_type.ts";
export { PlayerSession };
import { RemoveExpiredVotesTimer } from "./remove_expired_votes_timer_type.ts";
export { RemoveExpiredVotesTimer };

const REMOTE_MODULE = {
  tables: {
    bingo_board: {
      tableName: "bingo_board",
      rowType: BingoBoard.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    bingo_item: {
      tableName: "bingo_item",
      rowType: BingoItem.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    game_session: {
      tableName: "game_session",
      rowType: GameSession.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    item_check_vote: {
      tableName: "item_check_vote",
      rowType: ItemCheckVote.getTypeScriptAlgebraicType(),
      primaryKey: "id",
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
    },
    player_item_subject: {
      tableName: "player_item_subject",
      rowType: PlayerItemSubject.getTypeScriptAlgebraicType(),
    },
    player_session: {
      tableName: "player_session",
      rowType: PlayerSession.getTypeScriptAlgebraicType(),
    },
    remove_expired_votes_timer: {
      tableName: "remove_expired_votes_timer",
      rowType: RemoveExpiredVotesTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
    },
  },
  reducers: {
    cast_check_off_vote: {
      reducerName: "cast_check_off_vote",
      argsType: CastCheckOffVote.getTypeScriptAlgebraicType(),
    },
    check_for_winner: {
      reducerName: "check_for_winner",
      argsType: CheckForWinner.getTypeScriptAlgebraicType(),
    },
    create_bingo_board: {
      reducerName: "create_bingo_board",
      argsType: CreateBingoBoard.getTypeScriptAlgebraicType(),
    },
    delete_bingo_item: {
      reducerName: "delete_bingo_item",
      argsType: DeleteBingoItem.getTypeScriptAlgebraicType(),
    },
    join_game: {
      reducerName: "join_game",
      argsType: JoinGame.getTypeScriptAlgebraicType(),
    },
    remove_expired_votes: {
      reducerName: "remove_expired_votes",
      argsType: RemoveExpiredVotes.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
    sign_in: {
      reducerName: "sign_in",
      argsType: SignIn.getTypeScriptAlgebraicType(),
    },
    start_new_game: {
      reducerName: "start_new_game",
      argsType: StartNewGame.getTypeScriptAlgebraicType(),
    },
    submit_new_bingo_item: {
      reducerName: "submit_new_bingo_item",
      argsType: SubmitNewBingoItem.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CastCheckOffVote", args: CastCheckOffVote }
| { name: "CheckForWinner", args: CheckForWinner }
| { name: "CreateBingoBoard", args: CreateBingoBoard }
| { name: "DeleteBingoItem", args: DeleteBingoItem }
| { name: "JoinGame", args: JoinGame }
| { name: "RemoveExpiredVotes", args: RemoveExpiredVotes }
| { name: "SetName", args: SetName }
| { name: "SignIn", args: SignIn }
| { name: "StartNewGame", args: StartNewGame }
| { name: "SubmitNewBingoItem", args: SubmitNewBingoItem }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  castCheckOffVote(gameSessionId: number, bingoItemId: number) {
    const __args = { gameSessionId, bingoItemId };
    let __writer = new BinaryWriter(1024);
    CastCheckOffVote.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("cast_check_off_vote", __argsBuffer, this.setCallReducerFlags.castCheckOffVoteFlags);
  }

  onCastCheckOffVote(callback: (ctx: ReducerEventContext, gameSessionId: number, bingoItemId: number) => void) {
    this.connection.onReducer("cast_check_off_vote", callback);
  }

  removeOnCastCheckOffVote(callback: (ctx: ReducerEventContext, gameSessionId: number, bingoItemId: number) => void) {
    this.connection.offReducer("cast_check_off_vote", callback);
  }

  checkForWinner(boardId: number) {
    const __args = { boardId };
    let __writer = new BinaryWriter(1024);
    CheckForWinner.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("check_for_winner", __argsBuffer, this.setCallReducerFlags.checkForWinnerFlags);
  }

  onCheckForWinner(callback: (ctx: ReducerEventContext, boardId: number) => void) {
    this.connection.onReducer("check_for_winner", callback);
  }

  removeOnCheckForWinner(callback: (ctx: ReducerEventContext, boardId: number) => void) {
    this.connection.offReducer("check_for_winner", callback);
  }

  createBingoBoard(playerId: Identity, gameSessionId: number) {
    const __args = { playerId, gameSessionId };
    let __writer = new BinaryWriter(1024);
    CreateBingoBoard.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("create_bingo_board", __argsBuffer, this.setCallReducerFlags.createBingoBoardFlags);
  }

  onCreateBingoBoard(callback: (ctx: ReducerEventContext, playerId: Identity, gameSessionId: number) => void) {
    this.connection.onReducer("create_bingo_board", callback);
  }

  removeOnCreateBingoBoard(callback: (ctx: ReducerEventContext, playerId: Identity, gameSessionId: number) => void) {
    this.connection.offReducer("create_bingo_board", callback);
  }

  deleteBingoItem(bingoItemId: number) {
    const __args = { bingoItemId };
    let __writer = new BinaryWriter(1024);
    DeleteBingoItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("delete_bingo_item", __argsBuffer, this.setCallReducerFlags.deleteBingoItemFlags);
  }

  onDeleteBingoItem(callback: (ctx: ReducerEventContext, bingoItemId: number) => void) {
    this.connection.onReducer("delete_bingo_item", callback);
  }

  removeOnDeleteBingoItem(callback: (ctx: ReducerEventContext, bingoItemId: number) => void) {
    this.connection.offReducer("delete_bingo_item", callback);
  }

  joinGame(gameSessionId: number, password: string | undefined) {
    const __args = { gameSessionId, password };
    let __writer = new BinaryWriter(1024);
    JoinGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("join_game", __argsBuffer, this.setCallReducerFlags.joinGameFlags);
  }

  onJoinGame(callback: (ctx: ReducerEventContext, gameSessionId: number, password: string | undefined) => void) {
    this.connection.onReducer("join_game", callback);
  }

  removeOnJoinGame(callback: (ctx: ReducerEventContext, gameSessionId: number, password: string | undefined) => void) {
    this.connection.offReducer("join_game", callback);
  }

  removeExpiredVotes(timer: RemoveExpiredVotesTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    RemoveExpiredVotes.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("remove_expired_votes", __argsBuffer, this.setCallReducerFlags.removeExpiredVotesFlags);
  }

  onRemoveExpiredVotes(callback: (ctx: ReducerEventContext, timer: RemoveExpiredVotesTimer) => void) {
    this.connection.onReducer("remove_expired_votes", callback);
  }

  removeOnRemoveExpiredVotes(callback: (ctx: ReducerEventContext, timer: RemoveExpiredVotesTimer) => void) {
    this.connection.offReducer("remove_expired_votes", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

  signIn(password: string) {
    const __args = { password };
    let __writer = new BinaryWriter(1024);
    SignIn.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("sign_in", __argsBuffer, this.setCallReducerFlags.signInFlags);
  }

  onSignIn(callback: (ctx: ReducerEventContext, password: string) => void) {
    this.connection.onReducer("sign_in", callback);
  }

  removeOnSignIn(callback: (ctx: ReducerEventContext, password: string) => void) {
    this.connection.offReducer("sign_in", callback);
  }

  startNewGame(name: string, password: string | undefined) {
    const __args = { name, password };
    let __writer = new BinaryWriter(1024);
    StartNewGame.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("start_new_game", __argsBuffer, this.setCallReducerFlags.startNewGameFlags);
  }

  onStartNewGame(callback: (ctx: ReducerEventContext, name: string, password: string | undefined) => void) {
    this.connection.onReducer("start_new_game", callback);
  }

  removeOnStartNewGame(callback: (ctx: ReducerEventContext, name: string, password: string | undefined) => void) {
    this.connection.offReducer("start_new_game", callback);
  }

  submitNewBingoItem(body: string, subjectPlayers: Identity[] | undefined) {
    const __args = { body, subjectPlayers };
    let __writer = new BinaryWriter(1024);
    SubmitNewBingoItem.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("submit_new_bingo_item", __argsBuffer, this.setCallReducerFlags.submitNewBingoItemFlags);
  }

  onSubmitNewBingoItem(callback: (ctx: ReducerEventContext, body: string, subjectPlayers: Identity[] | undefined) => void) {
    this.connection.onReducer("submit_new_bingo_item", callback);
  }

  removeOnSubmitNewBingoItem(callback: (ctx: ReducerEventContext, body: string, subjectPlayers: Identity[] | undefined) => void) {
    this.connection.offReducer("submit_new_bingo_item", callback);
  }

}

export class SetReducerFlags {
  castCheckOffVoteFlags: CallReducerFlags = 'FullUpdate';
  castCheckOffVote(flags: CallReducerFlags) {
    this.castCheckOffVoteFlags = flags;
  }

  checkForWinnerFlags: CallReducerFlags = 'FullUpdate';
  checkForWinner(flags: CallReducerFlags) {
    this.checkForWinnerFlags = flags;
  }

  createBingoBoardFlags: CallReducerFlags = 'FullUpdate';
  createBingoBoard(flags: CallReducerFlags) {
    this.createBingoBoardFlags = flags;
  }

  deleteBingoItemFlags: CallReducerFlags = 'FullUpdate';
  deleteBingoItem(flags: CallReducerFlags) {
    this.deleteBingoItemFlags = flags;
  }

  joinGameFlags: CallReducerFlags = 'FullUpdate';
  joinGame(flags: CallReducerFlags) {
    this.joinGameFlags = flags;
  }

  removeExpiredVotesFlags: CallReducerFlags = 'FullUpdate';
  removeExpiredVotes(flags: CallReducerFlags) {
    this.removeExpiredVotesFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

  signInFlags: CallReducerFlags = 'FullUpdate';
  signIn(flags: CallReducerFlags) {
    this.signInFlags = flags;
  }

  startNewGameFlags: CallReducerFlags = 'FullUpdate';
  startNewGame(flags: CallReducerFlags) {
    this.startNewGameFlags = flags;
  }

  submitNewBingoItemFlags: CallReducerFlags = 'FullUpdate';
  submitNewBingoItem(flags: CallReducerFlags) {
    this.submitNewBingoItemFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get bingoBoard(): BingoBoardTableHandle {
    return new BingoBoardTableHandle(this.connection.clientCache.getOrCreateTable<BingoBoard>(REMOTE_MODULE.tables.bingo_board));
  }

  get bingoItem(): BingoItemTableHandle {
    return new BingoItemTableHandle(this.connection.clientCache.getOrCreateTable<BingoItem>(REMOTE_MODULE.tables.bingo_item));
  }

  get gameSession(): GameSessionTableHandle {
    return new GameSessionTableHandle(this.connection.clientCache.getOrCreateTable<GameSession>(REMOTE_MODULE.tables.game_session));
  }

  get itemCheckVote(): ItemCheckVoteTableHandle {
    return new ItemCheckVoteTableHandle(this.connection.clientCache.getOrCreateTable<ItemCheckVote>(REMOTE_MODULE.tables.item_check_vote));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }

  get playerItemSubject(): PlayerItemSubjectTableHandle {
    return new PlayerItemSubjectTableHandle(this.connection.clientCache.getOrCreateTable<PlayerItemSubject>(REMOTE_MODULE.tables.player_item_subject));
  }

  get playerSession(): PlayerSessionTableHandle {
    return new PlayerSessionTableHandle(this.connection.clientCache.getOrCreateTable<PlayerSession>(REMOTE_MODULE.tables.player_session));
  }

  get removeExpiredVotesTimer(): RemoveExpiredVotesTimerTableHandle {
    return new RemoveExpiredVotesTimerTableHandle(this.connection.clientCache.getOrCreateTable<RemoveExpiredVotesTimer>(REMOTE_MODULE.tables.remove_expired_votes_timer));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
